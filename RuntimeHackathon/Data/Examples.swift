import Foundation

// MARK: - –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö

class DataLayerExamples {
    
    // MARK: - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Repository
    static func setupRepositories() {
        let clubRepository = ClubRepository()
        let userRepository = UserRepository()
        let calendarRepository = CalendarRepository()
        
        // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ ViewModels
        // ClubsListViewModel(repository: clubRepository)
        // UserProfileViewModel(repository: userRepository)
        // CalendarViewModel(repository: calendarRepository)
    }
    
    // MARK: - –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å –∫–ª—É–±–∞–º–∏
    static func clubExamples() async {
        let repository = ClubRepository()
        
        do {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª—É–±–æ–≤ (—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π)
            let clubs = try await repository.getAllClubs()
            print("–ù–∞–π–¥–µ–Ω–æ –∫–ª—É–±–æ–≤: \(clubs.count)")
            
            // –ü–æ–∏—Å–∫ –∫–ª—É–±–æ–≤
            let searchResults = try await repository.searchClubs(query: "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")
            print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: \(searchResults.count)")
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—É–±–∞
            if let clubId = clubs.first?.id {
                if let club = try await repository.getClub(by: clubId) {
                    print("–ö–ª—É–±: \(club.name)")
                }
            }
            
            // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–ª—É–±—É
            if let clubId = clubs.first?.id {
                let updatedClub = try await repository.joinClub(clubId)
                print("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–ª—É–±—É: \(updatedClub.name)")
            }
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—É–±–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let userClubs = try await repository.getUserClubs()
            print("–ö–ª—É–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \(userClubs.count)")
            
        } catch {
            print("–û—à–∏–±–∫–∞: \(error)")
        }
    }
    
    // MARK: - –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    static func userExamples() async {
        let repository = UserRepository()
        
        do {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if let userId = UUID(uuidString: "12345678-1234-1234-1234-123456789012") {
                if let user = try await repository.getUser(by: userId) {
                    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: \(user.name)")
                    
                    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞
                    let newInterest = Interest(
                        name: "SwiftUI",
                        category: InterestCategory(
                            name: "tech",
                            emoji: "üíª",
                            displayName: "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
                        )
                    )
                    try await repository.addInterest(newInterest, to: userId)
                    print("–î–æ–±–∞–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–µ—Å: \(newInterest.name)")
                }
            }
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let interests = try await repository.getUserInterests()
            print("–ò–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \(interests.count)")
            
            // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            let searchResults = try await repository.searchUsers(query: "–ê–Ω–Ω–∞")
            print("–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: \(searchResults.count)")
            
        } catch {
            print("–û—à–∏–±–∫–∞: \(error)")
        }
    }
    
    // MARK: - –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
    static func calendarExamples() async {
        let repository = CalendarRepository()
        
        do {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
            let events = try await repository.getAllEvents()
            print("–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: \(events.count)")
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            let todayEvents = try await repository.getEvents(for: Date())
            print("–°–æ–±—ã—Ç–∏–π —Å–µ–≥–æ–¥–Ω—è: \(todayEvents.count)")
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é
            let weekEvents = try await repository.getWeekEvents()
            print("–°–æ–±—ã—Ç–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: \(weekEvents.count)")
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
            let newEvent = CalendarEvent(
                id: UUID(),
                title: "–ù–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞",
                date: Date().addingTimeInterval(3600), // –ß–µ—Ä–µ–∑ —á–∞—Å
                location: "–ì–ª–∞–≤–Ω—ã–π –∑–∞–ª",
                description: "–í–∞–∂–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ –∫–æ–º–∞–Ω–¥—ã",
                color: .blue,
                clubName: "–ö–ª—É–± –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤"
            )
            try await repository.saveEvent(newEvent)
            print("–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: \(newEvent.title)")
            
            // –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π
            let searchResults = try await repository.searchEvents(query: "–≤—Å—Ç—Ä–µ—á–∞")
            print("–ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: \(searchResults.count)")
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
            let upcomingEvents = try await repository.getUpcomingEvents(limit: 5)
            print("–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π: \(upcomingEvents.count)")
            
        } catch {
            print("–û—à–∏–±–∫–∞: \(error)")
        }
    }
    
    // MARK: - –ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ViewModels
    static func viewModelIntegrationExamples() {
        // –ü—Ä–∏–º–µ—Ä –¥–ª—è ClubsListViewModel
        class ClubsListViewModel: ObservableObject {
            @Published var clubs: [Club] = []
            @Published var isLoading = false
            @Published var errorMessage: String?
            
            private let repository: ClubRepository
            
            init(repository: ClubRepository = ClubRepository()) {
                self.repository = repository
            }
            
            @MainActor
            func loadClubs() async {
                isLoading = true
                errorMessage = nil
                
                do {
                    clubs = try await repository.getAllClubs()
                } catch {
                    errorMessage = error.localizedDescription
                }
                
                isLoading = false
            }
            
            @MainActor
            func joinClub(_ club: Club) async {
                do {
                    let updatedClub = try await repository.joinClub(club.id)
                    // –û–±–Ω–æ–≤–ª—è–µ–º UI
                    if let index = clubs.firstIndex(where: { $0.id == club.id }) {
                        clubs[index] = updatedClub
                    }
                } catch {
                    errorMessage = error.localizedDescription
                }
            }
        }
        
        // –ü—Ä–∏–º–µ—Ä –¥–ª—è UserProfileViewModel
        class UserProfileViewModel: ObservableObject {
            @Published var user: User?
            @Published var isLoading = false
            @Published var errorMessage: String?
            
            private let repository: UserRepository
            
            init(repository: UserRepository = UserRepository()) {
                self.repository = repository
            }
            
            @MainActor
            func loadProfile(userId: UUID) async {
                isLoading = true
                errorMessage = nil
                
                do {
                    user = try await repository.getUser(by: userId)
                } catch {
                    errorMessage = error.localizedDescription
                }
                
                isLoading = false
            }
            
            @MainActor
            func addInterest(_ interest: Interest) async {
                guard let userId = user?.id else { return }
                
                do {
                    try await repository.addInterest(interest, to: userId)
                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    await loadProfile(userId: userId)
                } catch {
                    errorMessage = error.localizedDescription
                }
            }
        }
        
        // –ü—Ä–∏–º–µ—Ä –¥–ª—è CalendarViewModel
        class CalendarViewModel: ObservableObject {
            @Published var events: [CalendarEvent] = []
            @Published var isLoading = false
            @Published var errorMessage: String?
            
            private let repository: CalendarRepository
            
            init(repository: CalendarRepository = CalendarRepository()) {
                self.repository = repository
            }
            
            @MainActor
            func loadEvents(for date: Date) async {
                isLoading = true
                errorMessage = nil
                
                do {
                    events = try await repository.getEvents(for: date)
                } catch {
                    errorMessage = error.localizedDescription
                }
                
                isLoading = false
            }
            
            @MainActor
            func createEvent(_ event: CalendarEvent) async {
                do {
                    try await repository.saveEvent(event)
                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
                    await loadEvents(for: event.date)
                } catch {
                    errorMessage = error.localizedDescription
                }
            }
        }
    }
    
    // MARK: - –ü—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    static func errorHandlingExamples() {
        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
        class ErrorHandler {
            static func handle(_ error: Error, context: String) {
                switch error {
                case ApiError.networkError(let underlyingError):
                    print("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –≤ \(context): \(underlyingError.localizedDescription)")
                case ApiError.unauthorized:
                    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ \(context)")
                    // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                case ApiError.serverError(let code):
                    print("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ \(code) –≤ \(context)")
                case ApiError.decodingError:
                    print("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ \(context)")
                default:
                    print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ \(context): \(error.localizedDescription)")
                }
            }
        }
        
        // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ Repository
        func safeApiCall<T>(_ apiCall: () async throws -> T, context: String) async -> T? {
            do {
                return try await apiCall()
            } catch {
                ErrorHandler.handle(error, context: context)
                return nil
            }
        }
    }
    
    // MARK: - –ü—Ä–∏–º–µ—Ä—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    static func cachingExamples() {
        // –ü—Ä–æ—Å—Ç–æ–π –∫—ç—à –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        class DataCache {
            static let shared = DataCache()
            private var cache: [String: Any] = [:]
            private let queue = DispatchQueue(label: "com.runtimehackathon.cache")
            
            func set<T>(_ value: T, for key: String) {
                queue.async {
                    self.cache[key] = value
                }
            }
            
            func get<T>(for key: String) -> T? {
                queue.sync {
                    return cache[key] as? T
                }
            }
            
            func clear() {
                queue.async {
                    self.cache.removeAll()
                }
            }
        }
        
        // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞ –≤ Repository
        class CachedClubRepository: ClubRepository {
            private let cache = DataCache.shared
            private let cacheKey = "clubs"
            
            override func getAllClubs() async throws -> [Club] {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
                if let cachedClubs: [Club] = cache.get(for: cacheKey) {
                    print("–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—É–±—ã")
                    return cachedClubs
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                let clubs = try await super.getAllClubs()
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                cache.set(clubs, for: cacheKey)
                
                return clubs
            }
        }
    }
}

// MARK: - –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
extension DataLayerExamples {
    static func runAllExamples() async {
        print("=== –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö ===")
        
        await clubExamples()
        await userExamples()
        await calendarExamples()
        
        viewModelIntegrationExamples()
        errorHandlingExamples()
        cachingExamples()
        
        print("=== –ü—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã ===")
    }
}
